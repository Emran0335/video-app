// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId             Int            @id @default(autoincrement())
  username           String         @unique
  email              String         @unique
  password           String         @unique
  fullName           String
  avatar             String?
  coverImage         String?
  description        String?        @default("")
  refreshToken       String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  watchHistory       Video[]
  Tweet              Tweet[]
  Comment            Comment[]
  Like               Like[]
  subscribedChannels Subscription[] @relation("Subscriber") // User as subscriber
  subscribers        Subscription[] @relation("Channel") // User as channel owner
  Playlist           Playlist[]
}

model Video {
  id          Int        @id @default(autoincrement())
  videoFile   String
  thumbnail   String
  title       String
  description String
  duration    Int
  ownerId     Int
  views       Int        @default(0)
  isPublised  Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  owner       User       @relation(fields: [ownerId], references: [userId])
  Comment     Comment[]
  Like        Like[]
  Playlist    Playlist[]
}

model Tweet {
  id        Int      @id @default(autoincrement())
  content   String
  owner     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   User     @relation(fields: [owner], references: [userId])
  Like      Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  video     Int
  owner     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videoId   Video    @relation(fields: [video], references: [id])
  ownerId   User     @relation(fields: [owner], references: [userId])
  Like      Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  comment   Int // relation with comment
  video     Int // relation with Video
  tweet     Int // relation with Tweet
  likedBy   Int // relation with User
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commentId Comment  @relation(fields: [comment], references: [id])
  videoId   Video    @relation(fields: [video], references: [id])
  tweetId   Tweet    @relation(fields: [tweet], references: [id])
  likedById User     @relation(fields: [likedBy], references: [userId])
}

model Playlist {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     Int // relation with User
  videos      Video[]
  owner       User     @relation(fields: [ownerId], references: [userId])
}

model Subscription {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subscriberId Int // relation with User
  channelId    Int // relation with User

  // User who subscribes (subscriber)
  subscriber User @relation("Subscriber", fields: [subscriberId], references: [userId])

  // Channel being subscribed to (channel owner)
  channel User @relation("Channel", fields: [channelId], references: [userId])

  // Unique constraint to prevent duplicate subscriptions
  @@unique([subscriberId, channelId])
}
